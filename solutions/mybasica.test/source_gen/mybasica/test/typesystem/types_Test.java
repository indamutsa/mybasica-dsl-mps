package mybasica.test.typesystem;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import org.junit.Assert;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.test.runtime.CheckErrorMessagesRunnable;
import jetbrains.mps.project.ProjectBase;
import java.util.ArrayList;
import jetbrains.mps.lang.test.runtime.CheckExpectedMessageRunnable;
import jetbrains.mps.errors.MessageStatus;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

@MPSLaunch
public class types_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(types_Test.class, "/Users/aindamutsa/MPSProjects/mybasica", "r:d2add095-749f-4fbe-82d5-4923be229b2f(mybasica.test.typesystem@tests)", false);

  public types_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_myJavaTestCase() throws Throwable {
    new TestBody(this).test_myJavaTestCase();
  }
  @Test
  public void test_ErrorMessagesCheck4560166870162659904() throws Throwable {
    new TestBody(this).test_ErrorMessagesCheck4560166870162659904();
  }
  @Test
  public void test_NodeDuplicateNameOnVariableCheck1093001149131521712() throws Throwable {
    new TestBody(this).test_NodeDuplicateNameOnVariableCheck1093001149131521712();
  }
  @Test
  public void test_NodeErrorCheck4560166870162648700() throws Throwable {
    new TestBody(this).test_NodeErrorCheck4560166870162648700();
  }
  @Test
  public void test_NodeOperationNotPermittedCheck4560166870162652727() throws Throwable {
    new TestBody(this).test_NodeOperationNotPermittedCheck4560166870162652727();
  }
  @Test
  public void test_ErrorMessagesCheck4560166870162675706() throws Throwable {
    new TestBody(this).test_ErrorMessagesCheck4560166870162675706();
  }
  @Test
  public void test_NodeTypeSystemCheck4560166870162687813() throws Throwable {
    new TestBody(this).test_NodeTypeSystemCheck4560166870162687813();
  }
  @Test
  public void test_ErrorMessagesCheck4560166870162667009() throws Throwable {
    new TestBody(this).test_ErrorMessagesCheck4560166870162667009();
  }

  /*package*/ static class TestBody extends BaseTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    public void test_myJavaTestCase() throws Exception {
      runWithinCommand(() -> {
        addNodeById("1093001149131510336");
        addNodeById("4560166870162666594");
        addNodeById("4560166870162694646");
      });
      runWithinCommand(() -> {
        Assert.assertEquals(SPropertyOperations.getString(getNodeById("4560166870162694702"), PROPS.name$MnvL), "someOtherWorkbook");
        Assert.assertEquals(ListSequence.fromList(SLinkOperations.getChildren(getNodeById("4560166870162694702"), LINKS.content$j5u6)).count(), 1);
      });
    }
    public void test_ErrorMessagesCheck4560166870162659904() throws Exception {

      runWithinCommand(() -> {
        SNode nodeToCheck = getRealNodeById("1093001149131512504");
        SNode operation = getRealNodeById("4560166870162659904");
        new CheckErrorMessagesRunnable(nodeToCheck, false, false, ((ProjectBase) myProject).getPlatform()).includeSelf(true).exclude(ListSequence.fromList(new ArrayList<CheckExpectedMessageRunnable>())).run();
      });
    }
    public void test_NodeDuplicateNameOnVariableCheck1093001149131521712() throws Exception {

      runWithinCommand(() -> {
        SNode nodeToCheck = getRealNodeById("1093001149131512546");
        SNode operation = getRealNodeById("1093001149131521712");
        new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)", "4458435806083820284"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
      });
    }
    public void test_NodeErrorCheck4560166870162648700() throws Exception {

      runWithinCommand(() -> {
        SNode nodeToCheck = getRealNodeById("4560166870162648664");
        SNode operation = getRealNodeById("4560166870162648700");
        new CheckExpectedMessageRunnable.CheckAnyMessageRunnable(nodeToCheck, MessageStatus.ERROR, "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
      });
    }
    public void test_NodeOperationNotPermittedCheck4560166870162652727() throws Exception {

      runWithinCommand(() -> {
        SNode nodeToCheck = getRealNodeById("4560166870162652451");
        SNode operation = getRealNodeById("4560166870162652727");
        new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)", "4458435806085670349"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
      });
    }
    public void test_ErrorMessagesCheck4560166870162675706() throws Exception {

      runWithinCommand(() -> {
        SNode nodeToCheck = getRealNodeById("1093001149131512493");
        SNode operation = getRealNodeById("4560166870162675706");
        new CheckErrorMessagesRunnable(nodeToCheck, false, false, ((ProjectBase) myProject).getPlatform()).includeSelf(true).exclude(ListSequence.fromListAndArray(new ArrayList<CheckExpectedMessageRunnable>(), new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(getRealNodeById("1093001149131512546"), MessageStatus.ERROR, new SNodePointer("r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)", "4458435806083820284"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()), new CheckExpectedMessageRunnable.CheckAnyMessageRunnable(getRealNodeById("4560166870162648664"), MessageStatus.ERROR, "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()), new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(getRealNodeById("4560166870162652451"), MessageStatus.ERROR, new SNodePointer("r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)", "4458435806085670349"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()))).run();
      });
    }
    public void test_NodeTypeSystemCheck4560166870162687813() throws Exception {

      runWithinCommand(() -> {
        SNode nodeToCheck = getRealNodeById("4560166870162687509");
        SNode operation = getRealNodeById("4560166870162687813");
        new CheckExpectedMessageRunnable.CheckExpectedTypesystemMessageRunnable(nodeToCheck, MessageStatus.ERROR, "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
      });
    }
    public void test_ErrorMessagesCheck4560166870162667009() throws Exception {

      runWithinCommand(() -> {
        SNode nodeToCheck = getRealNodeById("4560166870162666627");
        SNode operation = getRealNodeById("4560166870162667009");
        new CheckErrorMessagesRunnable(nodeToCheck, false, false, ((ProjectBase) myProject).getPlatform()).includeSelf(true).exclude(ListSequence.fromListAndArray(new ArrayList<CheckExpectedMessageRunnable>(), new CheckExpectedMessageRunnable.CheckExpectedTypesystemMessageRunnable(getRealNodeById("4560166870162687509"), MessageStatus.ERROR, "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()))).run();
      });
    }

  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink content$j5u6 = MetaAdapterFactory.getContainmentLink(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f658e8aL, 0x7aeac81c0f662b2fL, "content");
  }
}
