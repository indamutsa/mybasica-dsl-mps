package mybasica.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBBinaryArithmeticExpression = createDescriptorForBBinaryArithmeticExpression();
  /*package*/ final ConceptDescriptor myConceptBBinaryComparisonExpression = createDescriptorForBBinaryComparisonExpression();
  /*package*/ final ConceptDescriptor myConceptBBinaryExpression = createDescriptorForBBinaryExpression();
  /*package*/ final ConceptDescriptor myConceptBBooleanType = createDescriptorForBBooleanType();
  /*package*/ final ConceptDescriptor myConceptBDivExpression = createDescriptorForBDivExpression();
  /*package*/ final ConceptDescriptor myConceptBDoubleType = createDescriptorForBDoubleType();
  /*package*/ final ConceptDescriptor myConceptBEmptyStatement = createDescriptorForBEmptyStatement();
  /*package*/ final ConceptDescriptor myConceptBEqualsExpression = createDescriptorForBEqualsExpression();
  /*package*/ final ConceptDescriptor myConceptBExpression = createDescriptorForBExpression();
  /*package*/ final ConceptDescriptor myConceptBExpressionStatement = createDescriptorForBExpressionStatement();
  /*package*/ final ConceptDescriptor myConceptBGreaterThanExpression = createDescriptorForBGreaterThanExpression();
  /*package*/ final ConceptDescriptor myConceptBGreaterToEqualsExpression = createDescriptorForBGreaterToEqualsExpression();
  /*package*/ final ConceptDescriptor myConceptBIfStatement = createDescriptorForBIfStatement();
  /*package*/ final ConceptDescriptor myConceptBIntegerType = createDescriptorForBIntegerType();
  /*package*/ final ConceptDescriptor myConceptBLowerThanExpresssion = createDescriptorForBLowerThanExpresssion();
  /*package*/ final ConceptDescriptor myConceptBLowerToEqualsExpression = createDescriptorForBLowerToEqualsExpression();
  /*package*/ final ConceptDescriptor myConceptBMinusExpression = createDescriptorForBMinusExpression();
  /*package*/ final ConceptDescriptor myConceptBMulExpression = createDescriptorForBMulExpression();
  /*package*/ final ConceptDescriptor myConceptBNotEqualsExpression = createDescriptorForBNotEqualsExpression();
  /*package*/ final ConceptDescriptor myConceptBNumberLiteral = createDescriptorForBNumberLiteral();
  /*package*/ final ConceptDescriptor myConceptBPlusExpression = createDescriptorForBPlusExpression();
  /*package*/ final ConceptDescriptor myConceptBStatement = createDescriptorForBStatement();
  /*package*/ final ConceptDescriptor myConceptBStatementContainer = createDescriptorForBStatementContainer();
  /*package*/ final ConceptDescriptor myConceptBStringLiteral = createDescriptorForBStringLiteral();
  /*package*/ final ConceptDescriptor myConceptBStringType = createDescriptorForBStringType();
  /*package*/ final ConceptDescriptor myConceptBType = createDescriptorForBType();
  /*package*/ final ConceptDescriptor myConceptBVariable = createDescriptorForBVariable();
  /*package*/ final ConceptDescriptor myConceptBVariableReference = createDescriptorForBVariableReference();
  /*package*/ final ConceptDescriptor myConceptBWorkbook = createDescriptorForBWorkbook();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBBinaryArithmeticExpression, myConceptBBinaryComparisonExpression, myConceptBBinaryExpression, myConceptBBooleanType, myConceptBDivExpression, myConceptBDoubleType, myConceptBEmptyStatement, myConceptBEqualsExpression, myConceptBExpression, myConceptBExpressionStatement, myConceptBGreaterThanExpression, myConceptBGreaterToEqualsExpression, myConceptBIfStatement, myConceptBIntegerType, myConceptBLowerThanExpresssion, myConceptBLowerToEqualsExpression, myConceptBMinusExpression, myConceptBMulExpression, myConceptBNotEqualsExpression, myConceptBNumberLiteral, myConceptBPlusExpression, myConceptBStatement, myConceptBStatementContainer, myConceptBStringLiteral, myConceptBStringType, myConceptBType, myConceptBVariable, myConceptBVariableReference, myConceptBWorkbook);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.BBinaryArithmeticExpression:
        return myConceptBBinaryArithmeticExpression;
      case LanguageConceptSwitch.BBinaryComparisonExpression:
        return myConceptBBinaryComparisonExpression;
      case LanguageConceptSwitch.BBinaryExpression:
        return myConceptBBinaryExpression;
      case LanguageConceptSwitch.BBooleanType:
        return myConceptBBooleanType;
      case LanguageConceptSwitch.BDivExpression:
        return myConceptBDivExpression;
      case LanguageConceptSwitch.BDoubleType:
        return myConceptBDoubleType;
      case LanguageConceptSwitch.BEmptyStatement:
        return myConceptBEmptyStatement;
      case LanguageConceptSwitch.BEqualsExpression:
        return myConceptBEqualsExpression;
      case LanguageConceptSwitch.BExpression:
        return myConceptBExpression;
      case LanguageConceptSwitch.BExpressionStatement:
        return myConceptBExpressionStatement;
      case LanguageConceptSwitch.BGreaterThanExpression:
        return myConceptBGreaterThanExpression;
      case LanguageConceptSwitch.BGreaterToEqualsExpression:
        return myConceptBGreaterToEqualsExpression;
      case LanguageConceptSwitch.BIfStatement:
        return myConceptBIfStatement;
      case LanguageConceptSwitch.BIntegerType:
        return myConceptBIntegerType;
      case LanguageConceptSwitch.BLowerThanExpresssion:
        return myConceptBLowerThanExpresssion;
      case LanguageConceptSwitch.BLowerToEqualsExpression:
        return myConceptBLowerToEqualsExpression;
      case LanguageConceptSwitch.BMinusExpression:
        return myConceptBMinusExpression;
      case LanguageConceptSwitch.BMulExpression:
        return myConceptBMulExpression;
      case LanguageConceptSwitch.BNotEqualsExpression:
        return myConceptBNotEqualsExpression;
      case LanguageConceptSwitch.BNumberLiteral:
        return myConceptBNumberLiteral;
      case LanguageConceptSwitch.BPlusExpression:
        return myConceptBPlusExpression;
      case LanguageConceptSwitch.BStatement:
        return myConceptBStatement;
      case LanguageConceptSwitch.BStatementContainer:
        return myConceptBStatementContainer;
      case LanguageConceptSwitch.BStringLiteral:
        return myConceptBStringLiteral;
      case LanguageConceptSwitch.BStringType:
        return myConceptBStringType;
      case LanguageConceptSwitch.BType:
        return myConceptBType;
      case LanguageConceptSwitch.BVariable:
        return myConceptBVariable;
      case LanguageConceptSwitch.BVariableReference:
        return myConceptBVariableReference;
      case LanguageConceptSwitch.BWorkbook:
        return myConceptBWorkbook;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForBBinaryArithmeticExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BBinaryArithmeticExpression", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba12795L);
    b.class_(false, true, false);
    // extends: mybasica.structure.BBinaryExpression
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f67c878L);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/4458435806085851029");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBBinaryComparisonExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BBinaryComparisonExpression", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b93bdf1L);
    b.class_(false, true, false);
    // extends: mybasica.structure.BBinaryExpression
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f67c878L);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/4458435806084972017");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBBinaryExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BBinaryExpression", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f67c878L);
    b.class_(false, false, false);
    // extends: mybasica.structure.BExpression
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f677b0cL);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/8857111640020600952");
    b.version(3);
    b.aggregate("left", 0x7aeac81c0f67c879L).target(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f677b0cL).optional(false).ordered(true).multiple(false).origin("8857111640020600953").done();
    b.aggregate("right", 0x7aeac81c0f67c87bL).target(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f677b0cL).optional(false).ordered(true).multiple(false).origin("8857111640020600955").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBBooleanType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BBooleanType", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e30cL);
    b.class_(false, false, false);
    // extends: mybasica.structure.BType
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e2feL);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/4458435806086161164");
    b.version(3);
    b.alias("boolean");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBDivExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BDivExpression", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x242258ebfaae8be9L);
    b.class_(false, false, false);
    // extends: mybasica.structure.BBinaryArithmeticExpression
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba12795L);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/2603741305119869929");
    b.version(3);
    b.alias("/");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBDoubleType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BDoubleType", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3f48f79b8cea257aL);
    b.class_(false, false, false);
    // extends: mybasica.structure.BType
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e2feL);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/4560166870168774010");
    b.version(3);
    b.alias("double");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBEmptyStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BEmptyStatement", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f66305eL);
    b.class_(false, false, false);
    // extends: mybasica.structure.BStatement
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f662deeL);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/8857111640020496478");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBEqualsExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BEqualsExpression", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f68d8aeL);
    b.class_(false, false, false);
    // extends: mybasica.structure.BBinaryComparisonExpression
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b93bdf1L);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/8857111640020670638");
    b.version(3);
    b.alias("==");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BExpression", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f677b0cL);
    b.class_(false, true, false);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/8857111640020581132");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBExpressionStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BExpressionStatement", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x4a9021c4172dfcbaL);
    b.class_(false, false, false);
    // extends: mybasica.structure.BStatement
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f662deeL);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/5372831481539198138");
    b.version(3);
    b.aggregate("expr", 0x4a9021c4172dfcbbL).target(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f677b0cL).optional(false).ordered(true).multiple(false).origin("5372831481539198139").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBGreaterThanExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BGreaterThanExpression", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b938bf8L);
    b.class_(false, false, false);
    // extends: mybasica.structure.BBinaryComparisonExpression
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b93bdf1L);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/4458435806084959224");
    b.version(3);
    b.alias(">");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBGreaterToEqualsExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BGreaterToEqualsExpression", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b939977L);
    b.class_(false, false, false);
    // extends: mybasica.structure.BBinaryComparisonExpression
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b93bdf1L);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/4458435806084962679");
    b.version(3);
    b.alias(">=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBIfStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BIfStatement", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aea2d0de99bbb8bL);
    b.class_(false, false, false);
    // extends: mybasica.structure.BStatement
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f662deeL);
    b.parent(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aea2d0de985155cL);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/8856941154954623883");
    b.version(3);
    b.aggregate("condition", 0x7aea2d0de99bbcdaL).target(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f677b0cL).optional(false).ordered(true).multiple(false).origin("8856941154954624218").done();
    b.aggregate("then", 0x7aea2d0de99dea56L).target(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f662deeL).optional(true).ordered(true).multiple(true).origin("8856941154954766934").done();
    b.alias("if");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBIntegerType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BIntegerType", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e308L);
    b.class_(false, false, false);
    // extends: mybasica.structure.BType
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e2feL);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/4458435806086161160");
    b.version(3);
    b.alias("int");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBLowerThanExpresssion() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BLowerThanExpresssion", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b939974L);
    b.class_(false, false, false);
    // extends: mybasica.structure.BBinaryComparisonExpression
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b93bdf1L);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/4458435806084962676");
    b.version(3);
    b.alias(">");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBLowerToEqualsExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BLowerToEqualsExpression", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b939975L);
    b.class_(false, false, false);
    // extends: mybasica.structure.BBinaryComparisonExpression
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b93bdf1L);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/4458435806084962677");
    b.version(3);
    b.alias("<=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBMinusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BMinusExpression", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f67c824L);
    b.class_(false, false, false);
    // extends: mybasica.structure.BBinaryArithmeticExpression
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba12795L);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/8857111640020600868");
    b.version(3);
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBMulExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BMulExpression", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f67c82aL);
    b.class_(false, false, false);
    // extends: mybasica.structure.BBinaryArithmeticExpression
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba12795L);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/8857111640020600874");
    b.version(3);
    b.alias("*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBNotEqualsExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BNotEqualsExpression", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f68d8afL);
    b.class_(false, false, false);
    // extends: mybasica.structure.BBinaryComparisonExpression
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b93bdf1L);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/8857111640020670639");
    b.version(3);
    b.alias("!=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBNumberLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BNumberLiteral", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f673dbdL);
    b.class_(false, false, false);
    // extends: mybasica.structure.BExpression
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f677b0cL);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/8857111640020565437");
    b.version(3);
    b.property("value", 0x7aeac81c0f673dbeL).type(PrimitiveTypeId.STRING).origin("8857111640020565438").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBPlusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BPlusExpression", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f679f85L);
    b.class_(false, false, false);
    // extends: mybasica.structure.BBinaryArithmeticExpression
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba12795L);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/8857111640020590469");
    b.version(3);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BStatement", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f662deeL);
    b.class_(false, true, false);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/8857111640020495854");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBStatementContainer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BStatementContainer", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aea2d0de985155cL);
    b.interface_();
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/8856941154953139548");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBStringLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BStringLiteral", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f68dee2L);
    b.class_(false, false, false);
    // extends: mybasica.structure.BExpression
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f677b0cL);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/8857111640020672226");
    b.version(3);
    b.property("value", 0x7aeac81c0f68dee3L).type(PrimitiveTypeId.STRING).origin("8857111640020672227").done();
    b.alias("\"");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBStringType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BStringType", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e30aL);
    b.class_(false, false, false);
    // extends: mybasica.structure.BType
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e2feL);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/4458435806086161162");
    b.version(3);
    b.alias("string");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BType", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e2feL);
    b.class_(false, true, false);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/4458435806086161150");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBVariable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BVariable", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f662b2aL);
    b.class_(false, false, false);
    // extends: mybasica.structure.BStatement
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f662deeL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/8857111640020495146");
    b.version(3);
    b.aggregate("value", 0x7aeac81c0f673dc0L).target(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f677b0cL).optional(false).ordered(true).multiple(false).origin("8857111640020565440").done();
    b.aggregate("declaredType", 0x3ddf8bbe6ba3e47cL).target(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e2feL).optional(true).ordered(true).multiple(false).origin("4458435806086030460").done();
    b.alias("var ");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBVariableReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BVariableReference", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aea2d0de9781aa3L);
    b.class_(false, false, false);
    // extends: mybasica.structure.BExpression
    b.super_(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f677b0cL);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/8856941154952288931");
    b.version(3);
    b.associate("variable", 0x7aea2d0de9781aa5L).target(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f662b2aL).optional(false).origin("8856941154952288933").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBWorkbook() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("mybasica", "BWorkbook", 0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f658e8aL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aea2d0de985155cL);
    b.origin("r:6e326de5-8c63-4e2e-b895-757203818630(mybasica.structure)/8857111640020455050");
    b.version(3);
    b.aggregate("content", 0x7aeac81c0f662b2fL).target(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f662deeL).optional(true).ordered(true).multiple(true).origin("8857111640020495151").done();
    return b.create();
  }
}
