package mybasica.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int BBinaryArithmeticExpression = 0;
  public static final int BBinaryComparisonExpression = 1;
  public static final int BBinaryExpression = 2;
  public static final int BBooleanType = 3;
  public static final int BDivExpression = 4;
  public static final int BDoubleType = 5;
  public static final int BEmptyStatement = 6;
  public static final int BEqualsExpression = 7;
  public static final int BExpression = 8;
  public static final int BExpressionStatement = 9;
  public static final int BGreaterThanExpression = 10;
  public static final int BGreaterToEqualsExpression = 11;
  public static final int BIfStatement = 12;
  public static final int BIntegerType = 13;
  public static final int BLowerThanExpresssion = 14;
  public static final int BLowerToEqualsExpression = 15;
  public static final int BMinusExpression = 16;
  public static final int BMulExpression = 17;
  public static final int BNotEqualsExpression = 18;
  public static final int BNumberLiteral = 19;
  public static final int BPlusExpression = 20;
  public static final int BStatement = 21;
  public static final int BStatementContainer = 22;
  public static final int BStringLiteral = 23;
  public static final int BStringType = 24;
  public static final int BType = 25;
  public static final int BVariable = 26;
  public static final int BVariableReference = 27;
  public static final int BWorkbook = 28;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x4893d0aba60e42bcL, 0xbfcd58191c291322L);
    builder.put(0x3ddf8bbe6ba12795L, BBinaryArithmeticExpression);
    builder.put(0x3ddf8bbe6b93bdf1L, BBinaryComparisonExpression);
    builder.put(0x7aeac81c0f67c878L, BBinaryExpression);
    builder.put(0x3ddf8bbe6ba5e30cL, BBooleanType);
    builder.put(0x242258ebfaae8be9L, BDivExpression);
    builder.put(0x3f48f79b8cea257aL, BDoubleType);
    builder.put(0x7aeac81c0f66305eL, BEmptyStatement);
    builder.put(0x7aeac81c0f68d8aeL, BEqualsExpression);
    builder.put(0x7aeac81c0f677b0cL, BExpression);
    builder.put(0x4a9021c4172dfcbaL, BExpressionStatement);
    builder.put(0x3ddf8bbe6b938bf8L, BGreaterThanExpression);
    builder.put(0x3ddf8bbe6b939977L, BGreaterToEqualsExpression);
    builder.put(0x7aea2d0de99bbb8bL, BIfStatement);
    builder.put(0x3ddf8bbe6ba5e308L, BIntegerType);
    builder.put(0x3ddf8bbe6b939974L, BLowerThanExpresssion);
    builder.put(0x3ddf8bbe6b939975L, BLowerToEqualsExpression);
    builder.put(0x7aeac81c0f67c824L, BMinusExpression);
    builder.put(0x7aeac81c0f67c82aL, BMulExpression);
    builder.put(0x7aeac81c0f68d8afL, BNotEqualsExpression);
    builder.put(0x7aeac81c0f673dbdL, BNumberLiteral);
    builder.put(0x7aeac81c0f679f85L, BPlusExpression);
    builder.put(0x7aeac81c0f662deeL, BStatement);
    builder.put(0x7aea2d0de985155cL, BStatementContainer);
    builder.put(0x7aeac81c0f68dee2L, BStringLiteral);
    builder.put(0x3ddf8bbe6ba5e30aL, BStringType);
    builder.put(0x3ddf8bbe6ba5e2feL, BType);
    builder.put(0x7aeac81c0f662b2aL, BVariable);
    builder.put(0x7aea2d0de9781aa3L, BVariableReference);
    builder.put(0x7aeac81c0f658e8aL, BWorkbook);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
