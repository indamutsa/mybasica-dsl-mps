package mybasica.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new BBinaryExpression_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new BEmptyStatement_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new BExpressionStatement_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new BIfStatement_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new BNumberLiteral_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new BStringLiteral_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new BType_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new BVariable_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new BVariableReference_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new BWorkbook_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_0(String editorComponentId) {
    if ("mybasica.editor.workbookHeader".equals(editorComponentId)) {
      return Collections.singletonList(new workbookHeader());
    }
    return Collections.emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_1(String editorComponentId) {
    if ("mybasica.editor.DummyForGrammarCells".equals(editorComponentId)) {
      return Collections.singletonList(new DummyForGrammarCells());
    }
    return Collections.emptyList();
  }
  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return getDeclaredEC_0(editorComponentId);
      case 1:
        return getDeclaredEC_1(editorComponentId);
      default:
    }
    return Collections.emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Arrays.asList(new TransformationMenu[]{new IncludeBeforeAfterTransformations(), new template_GrammarCellsSideTransformationsMenu()});
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex3.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BBinaryArithmeticExpression());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BBinaryComparisonExpression());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BBinaryExpression());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BBooleanType());
      case 4:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BDivExpression());
      case 5:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BDoubleType());
      case 6:
        return Arrays.asList(new SubstituteMenu[]{new BEmptyStatement_SubstituteMenu(), new GrammarCellsSubstituteMenu_BEmptyStatement()});
      case 7:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BEqualsExpression());
      case 8:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BExpression());
      case 9:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BExpressionStatement());
      case 10:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BGreaterThanExpression());
      case 11:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BGreaterToEqualsExpression());
      case 12:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BIfStatement());
      case 13:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BIntegerType());
      case 14:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BLowerThanExpresssion());
      case 15:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BLowerToEqualsExpression());
      case 16:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BMinusExpression());
      case 17:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BMulExpression());
      case 18:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BNotEqualsExpression());
      case 19:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BNumberLiteral());
      case 20:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BPlusExpression());
      case 21:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BStatement());
      case 22:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BStatementContainer());
      case 23:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BStringLiteral());
      case 24:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BStringType());
      case 25:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BType());
      case 26:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BVariable());
      case 27:
        return Arrays.asList(new SubstituteMenu[]{new BVariableReference_SubstituteMenu(), new GrammarCellsSubstituteMenu_BVariableReference()});
      case 28:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BWorkbook());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f67c878L), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f66305eL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x4a9021c4172dfcbaL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aea2d0de99bbb8bL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f673dbdL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f68dee2L), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e2feL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f662b2aL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aea2d0de9781aa3L), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f658e8aL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f658e8aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).seal();
  private static final ConceptSwitchIndex conceptIndex3 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba12795L), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b93bdf1L), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f67c878L), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e30cL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x242258ebfaae8be9L), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3f48f79b8cea257aL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f66305eL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f68d8aeL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f677b0cL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x4a9021c4172dfcbaL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b938bf8L), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b939977L), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aea2d0de99bbb8bL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e308L), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b939974L), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b939975L), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f67c824L), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f67c82aL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f68d8afL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f673dbdL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f679f85L), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f662deeL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aea2d0de985155cL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f68dee2L), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e30aL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e2feL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f662b2aL), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aea2d0de9781aa3L), MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f658e8aL)).seal();
}
