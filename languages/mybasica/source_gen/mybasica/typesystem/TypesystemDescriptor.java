package mybasica.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.BaseHelginsDescriptor;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.OverloadedOpsProvider_OneTypeSpecified;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.errors.IRuleConflictWarningProducer;
import jetbrains.mps.lang.typesystem.runtime.OverloadedOperationsTypesProvider;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class TypesystemDescriptor extends BaseHelginsDescriptor {
  public TypesystemDescriptor() {
    {
      InferenceRule_Runtime inferenceRule = new typeof_BVariableReference_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_BinaryExpression_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_NumberLiteral_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_StringLiteral_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_Variable_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      NonTypesystemRule_Runtime nonTypesystemRule = new check_duplicateVariableNames_NonTypesystemRule();
      this.myNonTypesystemRules.add(nonTypesystemRule);
    }
    this.myOverloadedOperationsTypesProviders.add(new CustomOverloadedOperationsTypesProvider_a(CONCEPTS.BBinaryComparisonExpression$PZ));
    this.myOverloadedOperationsTypesProviders.add(new CustomOverloadedOperationsTypesProvider_b(CONCEPTS.BEqualsExpression$rF));
    this.myOverloadedOperationsTypesProviders.add(new CustomOverloadedOperationsTypesProvider_c(CONCEPTS.BNotEqualsExpression$sa));
    this.myOverloadedOperationsTypesProviders.add(new CustomOverloadedOperationsTypesProvider_d(CONCEPTS.BBinaryArithmeticExpression$Dt));
    {
      OverloadedOpsProvider_OneTypeSpecified provider = new OverloadedOpsProvider_OneTypeSpecified() {
        {
          this.myOperandType = createBStringType_3ist9o_a0a0a0a0a0a0a01a0();
          this.myOperationConcept = CONCEPTS.BPlusExpression$Yc;
          this.myTypeIsExact = false;
          this.myIsStrong = false;
          this.myRuleModelId = "r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)";
          this.myRuleNodeId = "4458435806085996478";
        }
        public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
          return createBStringType_3ist9o_a0a1a0a0a0a0k0a();
        }
        @Override
        public void reportConflict(IRuleConflictWarningProducer producer) {
          producer.produceWarning(myRuleModelId, myRuleNodeId);
        }
      };
      this.myOverloadedOperationsTypesProviders.add(provider);
    }
  }
  public static class CustomOverloadedOperationsTypesProvider_a extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProvider_a(SAbstractConcept concept) {
      this.myLeftOperandType = createBIntegerType_3ist9o_a0a0a1();
      this.myRightOperandType = createBIntegerType_3ist9o_a0b0a1();
      this.myOperationConcept = concept;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
      this.myRuleModelId = "r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)";
      this.myRuleNodeId = "4458435806085626518";
    }
    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return createBBooleanType_3ist9o_a0a1b();
    }
    @Override
    public void reportConflict(IRuleConflictWarningProducer producer) {
      producer.produceWarning(myRuleModelId, myRuleNodeId);
    }
    private static SNode createBIntegerType_3ist9o_a0a0a1() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BIntegerType$dw);
      return n0.getResult();
    }
    private static SNode createBIntegerType_3ist9o_a0b0a1() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BIntegerType$dw);
      return n0.getResult();
    }
    private static SNode createBBooleanType_3ist9o_a0a1b() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BBooleanType$fs);
      return n0.getResult();
    }
  }
  public static class CustomOverloadedOperationsTypesProvider_b extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProvider_b(SAbstractConcept concept) {
      this.myLeftOperandType = createBStringType_3ist9o_a0a0a2();
      this.myRightOperandType = createBStringType_3ist9o_a0b0a2();
      this.myOperationConcept = concept;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
      this.myRuleModelId = "r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)";
      this.myRuleNodeId = "4458435806085839565";
    }
    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return createBBooleanType_3ist9o_a0a1c();
    }
    @Override
    public void reportConflict(IRuleConflictWarningProducer producer) {
      producer.produceWarning(myRuleModelId, myRuleNodeId);
    }
    private static SNode createBStringType_3ist9o_a0a0a2() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BStringType$eu);
      return n0.getResult();
    }
    private static SNode createBStringType_3ist9o_a0b0a2() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BStringType$eu);
      return n0.getResult();
    }
    private static SNode createBBooleanType_3ist9o_a0a1c() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BBooleanType$fs);
      return n0.getResult();
    }
  }
  public static class CustomOverloadedOperationsTypesProvider_c extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProvider_c(SAbstractConcept concept) {
      this.myLeftOperandType = createBStringType_3ist9o_a0a0a3();
      this.myRightOperandType = createBStringType_3ist9o_a0b0a3();
      this.myOperationConcept = concept;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
      this.myRuleModelId = "r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)";
      this.myRuleNodeId = "4458435806085840261";
    }
    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return createBStringType_3ist9o_a0a1d();
    }
    @Override
    public void reportConflict(IRuleConflictWarningProducer producer) {
      producer.produceWarning(myRuleModelId, myRuleNodeId);
    }
    private static SNode createBStringType_3ist9o_a0a0a3() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BStringType$eu);
      return n0.getResult();
    }
    private static SNode createBStringType_3ist9o_a0b0a3() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BStringType$eu);
      return n0.getResult();
    }
    private static SNode createBStringType_3ist9o_a0a1d() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BStringType$eu);
      return n0.getResult();
    }
  }
  public static class CustomOverloadedOperationsTypesProvider_d extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProvider_d(SAbstractConcept concept) {
      this.myLeftOperandType = createBIntegerType_3ist9o_a0a0a4();
      this.myRightOperandType = createBIntegerType_3ist9o_a0b0a4();
      this.myOperationConcept = concept;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
      this.myRuleModelId = "r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)";
      this.myRuleNodeId = "4458435806085851520";
    }
    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return createBIntegerType_3ist9o_a0a1e();
    }
    @Override
    public void reportConflict(IRuleConflictWarningProducer producer) {
      producer.produceWarning(myRuleModelId, myRuleNodeId);
    }
    private static SNode createBIntegerType_3ist9o_a0a0a4() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BIntegerType$dw);
      return n0.getResult();
    }
    private static SNode createBIntegerType_3ist9o_a0b0a4() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BIntegerType$dw);
      return n0.getResult();
    }
    private static SNode createBIntegerType_3ist9o_a0a1e() {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BIntegerType$dw);
      return n0.getResult();
    }
  }
  private static SNode createBStringType_3ist9o_a0a0a0a0a0a0a01a0() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BStringType$eu);
    return n0.getResult();
  }
  private static SNode createBStringType_3ist9o_a0a1a0a0a0a0k0a() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BStringType$eu);
    return n0.getResult();
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BBinaryComparisonExpression$PZ = MetaAdapterFactory.getConcept(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6b93bdf1L, "mybasica.structure.BBinaryComparisonExpression");
    /*package*/ static final SConcept BEqualsExpression$rF = MetaAdapterFactory.getConcept(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f68d8aeL, "mybasica.structure.BEqualsExpression");
    /*package*/ static final SConcept BNotEqualsExpression$sa = MetaAdapterFactory.getConcept(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f68d8afL, "mybasica.structure.BNotEqualsExpression");
    /*package*/ static final SConcept BBinaryArithmeticExpression$Dt = MetaAdapterFactory.getConcept(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba12795L, "mybasica.structure.BBinaryArithmeticExpression");
    /*package*/ static final SConcept BPlusExpression$Yc = MetaAdapterFactory.getConcept(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f679f85L, "mybasica.structure.BPlusExpression");
    /*package*/ static final SConcept BIntegerType$dw = MetaAdapterFactory.getConcept(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e308L, "mybasica.structure.BIntegerType");
    /*package*/ static final SConcept BBooleanType$fs = MetaAdapterFactory.getConcept(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e30cL, "mybasica.structure.BBooleanType");
    /*package*/ static final SConcept BStringType$eu = MetaAdapterFactory.getConcept(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x3ddf8bbe6ba5e30aL, "mybasica.structure.BStringType");
  }
}
