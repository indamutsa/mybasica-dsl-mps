package mybasica.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.IRuleConflictWarningProducer;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class typeof_BinaryExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_BinaryExpression_InferenceRule() {
  }
  public void applyRule(final SNode binaryExpression, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      final SNode lefType = typeCheckingContext.typeOf(SLinkOperations.getTarget(binaryExpression, LINKS.left$Sg7x), "r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)", "4458435806085638983", true);
      typeCheckingContext.whenConcrete(lefType, new Runnable() {
        public void run() {
          {
            final SNode rightType = typeCheckingContext.typeOf(SLinkOperations.getTarget(binaryExpression, LINKS.right$Sg_z), "r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)", "4458435806085641715", true);
            typeCheckingContext.whenConcrete(rightType, new Runnable() {
              public void run() {
                SNode resultType = typeCheckingContext.getOverloadedOperationType(binaryExpression, typeCheckingContext.getExpandedNode(lefType), typeCheckingContext.getExpandedNode(rightType), new IRuleConflictWarningProducer() {
                  public void produceWarning(String modelId, String ruleId) {
                    typeCheckingContext.reportWarning(binaryExpression, "coflicting rules for overloaded operation type", modelId, ruleId, null, new NodeMessageTarget());

                  }
                });

                if (resultType != null) {
                  {
                    SNode _nodeToCheck_1029348928467 = binaryExpression;
                    EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)", "4458435806085625226", 0, null);
                    typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)", "4458435806085623650", true), (SNode) resultType, _info_12389875345);
                  }
                } else {
                  {
                    SNode _nodeToCheck_1029348928467 = binaryExpression;
                    EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)", "4458435806085672136", 0, null);
                    typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)", "4458435806085670566", true), (SNode) createRuntimeErrorType_601ywe_a1a0c0a0a2a0a0b0a1a0a0a0b0a1a0a1(), _info_12389875345);
                  }
                  {
                    final MessageTarget errorTarget = new NodeMessageTarget();
                    IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(binaryExpression, "Operation not permitted", "r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)", "4458435806085670349", null, errorTarget);
                  }
                }
              }
            }, "r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)", "4458435806085641698", false, false);
          }
        }
      }, "r:623432a5-9cef-4769-8359-ee5e617f0f7a(mybasica.typesystem)", "4458435806085638932", false, false);
    }

  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.BBinaryExpression$TR;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static SNode createRuntimeErrorType_601ywe_a1a0c0a0a2a0a0b0a1a0a0a0b0a1a0a1() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.RuntimeErrorType$3c);
    n0.setProperty(PROPS.errorText$leWQ, "Operation not permitted!");
    return n0.getResult();
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink left$Sg7x = MetaAdapterFactory.getContainmentLink(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f67c878L, 0x7aeac81c0f67c879L, "left");
    /*package*/ static final SContainmentLink right$Sg_z = MetaAdapterFactory.getContainmentLink(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f67c878L, 0x7aeac81c0f67c87bL, "right");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BBinaryExpression$TR = MetaAdapterFactory.getConcept(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f67c878L, "mybasica.structure.BBinaryExpression");
    /*package*/ static final SConcept RuntimeErrorType$3c = MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x113f84956f9L, "jetbrains.mps.lang.typesystem.structure.RuntimeErrorType");
  }

  private static final class PROPS {
    /*package*/ static final SProperty errorText$leWQ = MetaAdapterFactory.getProperty(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x113f84956f9L, 0x113f84956faL, "errorText");
  }
}
