package complex.datatypes.language.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BaseEntityMember;
  private ConceptPresentation props_EmptyEntityMember;
  private ConceptPresentation props_EntityDefinition;
  private ConceptPresentation props_EntityMember;
  private ConceptPresentation props_EntityType;
  private ConceptPresentation props_MySpecialEntityDefinition;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BaseEntityMember:
        if (props_BaseEntityMember == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BaseEntityMember = cpb.create();
        }
        return props_BaseEntityMember;
      case LanguageConceptSwitch.EmptyEntityMember:
        if (props_EmptyEntityMember == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EmptyEntityMember");
          props_EmptyEntityMember = cpb.create();
        }
        return props_EmptyEntityMember;
      case LanguageConceptSwitch.EntityDefinition:
        if (props_EntityDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EntityDefinition = cpb.create();
        }
        return props_EntityDefinition;
      case LanguageConceptSwitch.EntityMember:
        if (props_EntityMember == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EntityMember = cpb.create();
        }
        return props_EntityMember;
      case LanguageConceptSwitch.EntityType:
        if (props_EntityType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x3b289434f886aceaL, 0x3b289434f886ad4cL, "entity", "", "");
          props_EntityType = cpb.create();
        }
        return props_EntityType;
      case LanguageConceptSwitch.MySpecialEntityDefinition:
        if (props_MySpecialEntityDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MySpecialEntityDefinition = cpb.create();
        }
        return props_MySpecialEntityDefinition;
    }
    return null;
  }
}
