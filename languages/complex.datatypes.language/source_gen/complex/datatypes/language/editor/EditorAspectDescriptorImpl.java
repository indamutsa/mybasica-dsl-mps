package complex.datatypes.language.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import jetbrains.mps.openapi.editor.descriptor.EditorHintsProvider;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;
import java.util.Arrays;
import jetbrains.mps.editor.runtime.descriptor.ConceptEditorHintImpl;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase implements EditorHintsProvider {
  private Collection<ConceptEditorHint> myHints = Arrays.<ConceptEditorHint>asList(new ConceptEditorHintImpl("entitiesDiagram", "entities as diagram", true, "complex.datatypes.language.editor.diagram.entitiesDiagram"));
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new BWorkbook_entitiesDiagram_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new EmptyEntityMember_Editor());
      case 2:
        return Arrays.asList(new ConceptEditor[]{new EntityDefinition_Editor(), new EntityDefinition_entitiesDiagram_Editor()});
      case 3:
        return Collections.<ConceptEditor>singletonList(new EntityMember_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new EntityType_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new MySpecialEntityDefinition_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_0(String editorComponentId) {
    if ("complex.datatypes.language.editor.DummyForGrammarCells".equals(editorComponentId)) {
      return Collections.singletonList(new DummyForGrammarCells());
    }
    return Collections.emptyList();
  }
  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return getDeclaredEC_0(editorComponentId);
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorHint> getHints() {
    return myHints;
  }

  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Arrays.asList(new TransformationMenu[]{new IncludeBeforeAfterTransformations(), new template_GrammarCellsSideTransformationsMenu()});
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex3.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BaseEntityMember());
      case 1:
        return Arrays.asList(new SubstituteMenu[]{new EmptyEntityMember_SubstituteMenu(), new GrammarCellsSubstituteMenu_EmptyEntityMember()});
      case 2:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_EntityDefinition());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_EntityMember());
      case 4:
        return Arrays.asList(new SubstituteMenu[]{new EntityType_SubstituteMenu(), new GrammarCellsSubstituteMenu_EntityType()});
      case 5:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_MySpecialEntityDefinition());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f658e8aL), MetaIdFactory.conceptId(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x27581bc554634b3dL), MetaIdFactory.conceptId(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x27581bc5546348b5L), MetaIdFactory.conceptId(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x27581bc5546b93a2L), MetaIdFactory.conceptId(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x3b289434f886aceaL), MetaIdFactory.conceptId(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x3bb1f2a967f91d10L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).seal();
  private static final ConceptSwitchIndex conceptIndex3 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x27581bc554634929L), MetaIdFactory.conceptId(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x27581bc554634b3dL), MetaIdFactory.conceptId(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x27581bc5546348b5L), MetaIdFactory.conceptId(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x27581bc5546b93a2L), MetaIdFactory.conceptId(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x3b289434f886aceaL), MetaIdFactory.conceptId(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x3bb1f2a967f91d10L)).seal();
}
