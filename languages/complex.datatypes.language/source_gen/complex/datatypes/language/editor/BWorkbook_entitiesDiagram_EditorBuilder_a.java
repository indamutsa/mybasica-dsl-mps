package complex.datatypes.language.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.impl.cellActions.CellAction_CreateChildRangeSelection;
import jetbrains.mps.openapi.editor.menus.transformation.SNodeLocation;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SEmptyContainmentSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.nodeEditor.selection.NodeRangeSelection;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import de.itemis.mps.editor.diagram.runtime.jgraph.BaseDiagramECell;
import de.itemis.mps.editor.diagram.runtime.EditorUtil;
import de.itemis.mps.editor.diagram.runtime.jgraph.DiagramCreationContext;
import de.itemis.mps.editor.diagram.runtime.DiagramContext;
import de.itemis.mps.editor.diagram.runtime.ContextVariables;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramAccessor;
import de.itemis.mps.editor.diagram.runtime.model.AbstractDiagramAccessor;
import java.util.List;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramElementAccessor;
import de.itemis.mps.editor.diagram.runtime.model.IAccessorFactory;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionType;
import java.util.Collections;
import de.itemis.mps.editor.diagram.runtime.model.GeneratedConnectionType;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpoint;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import de.itemis.mps.editor.diagram.runtime.model.DiagramModel;
import de.itemis.mps.editor.diagram.runtime.jgraph.ElkLayouter;
import de.itemis.mps.editor.diagram.runtime.model.IPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.CompositePaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.FilteringPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.SubstituteInfoPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.substitute.SubstituteInfoFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import de.itemis.mps.editor.diagram.runtime.jgraph.SubDiagramECell;
import de.itemis.mps.editor.diagram.runtime.jgraph.RootDiagramECell;
import de.itemis.mps.editor.diagram.runtime.jgraph.RootDCell;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

/*package*/ class BWorkbook_entitiesDiagram_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public BWorkbook_entitiesDiagram_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_0();
  }

  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_qkudke_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.addEditorCell(createComponent_0());
    editorCell.addEditorCell(createRefNodeList_0());
    editorCell.addEditorCell(createDiagram_1());
    return editorCell;
  }
  private EditorCell createComponent_0() {
    EditorCell editorCell = getCellFactory().createEditorComponentCell(myNode, "mybasica.editor.workbookHeader");
    return editorCell;
  }
  private EditorCell createRefNodeList_0() {
    AbstractCellListHandler handler = new contentListHandler_qkudke_b0(myNode, getEditorContext());
    EditorCell_Collection editorCell = handler.createCells(new CellLayout_Vertical(), false);
    editorCell.setCellId("refNodeList_content");
    editorCell.setSRole(handler.getElementSRole());
    return editorCell;
  }
  private static class contentListHandler_qkudke_b0 extends RefNodeListHandler {
    @NotNull
    private SNode myNode;

    public contentListHandler_qkudke_b0(SNode ownerNode, EditorContext context) {
      super(context, false);
      myNode = ownerNode;
    }

    @NotNull
    public SNode getNode() {
      return myNode;
    }
    public SContainmentLink getSLink() {
      return LINKS.content$j5u6;
    }
    public SAbstractConcept getChildSConcept() {
      return CONCEPTS.BStatement$rK;
    }

    public EditorCell createNodeCell(SNode elementNode) {
      EditorCell elementCell = getUpdateSession().updateChildNodeCell(elementNode);
      installElementCellActions(elementNode, elementCell, false);
      elementCell.setAction(CellActionType.SELECT_NEXT, new CellAction_CreateChildRangeSelection(elementNode, new RangeSelectionFilter_qkudke_b0(getEditorContext()), "empty_content", getEditorContext(), true));
      elementCell.setAction(CellActionType.SELECT_PREVIOUS, new CellAction_CreateChildRangeSelection(elementNode, new RangeSelectionFilter_qkudke_b0(getEditorContext()), "empty_content", getEditorContext(), false));
      return elementCell;
    }
    public EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(contentListHandler_qkudke_b0.this.getNode(), LINKS.content$j5u6));
      try {
        EditorCell emptyCell = null;
        emptyCell = super.createEmptyCell();
        installElementCellActions(null, emptyCell, true);
        setCellContext(emptyCell);
        return emptyCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }

    private static final Object OBJ = new Object();

    public void installElementCellActions(SNode elementNode, EditorCell elementCell, boolean isEmptyCell) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET) == null) {
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET, OBJ);
          elementCell.setSubstituteInfo((isEmptyCell ? new SEmptyContainmentSubstituteInfo(elementCell) : new SChildSubstituteInfo(elementCell)));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET, OBJ);
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.FORWARD));
        }
      }
      if (elementCell.getUserObject(ELEMENT_CELL_BACKSPACE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(ELEMENT_CELL_BACKSPACE_SET, OBJ);
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.BACKWARD));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, OBJ);
        }
      }
    }
    public boolean filter(SNode childNode) {
      return !(SNodeOperations.isInstanceOf(childNode, CONCEPTS.EntityDefinition$ws));
    }
  }
  public static class RangeSelectionFilter_qkudke_b0 extends NodeRangeSelection.RangeSelectionFilter {


    public RangeSelectionFilter_qkudke_b0(EditorContext editorContext) {
      super(editorContext);
    }
    public boolean accept(SNode childNode) {
      return !(SNodeOperations.isInstanceOf(childNode, CONCEPTS.EntityDefinition$ws));
    }
    public String getModuleReference() {
      return "7563d14a-4ef5-4002-adf6-eb0799115e60(complex.datatypes.language)";
    }
  }
  private EditorCell createDiagram_0(final EditorContext editorContext, final SNode node) {
    final Wrappers._T<BaseDiagramECell> editorCell = new Wrappers._T<BaseDiagramECell>(null);

    EditorUtil.noCaching(editorContext, () -> {
      DiagramCreationContext.createDiagram(() -> {
        DiagramContext.withContext(node, () -> editorCell.value, () -> {
          ContextVariables.withValue("thisNode", node, () -> {
            final ContextVariables _variablesContext = ContextVariables.getCurrent();
            IDiagramAccessor accessor = new AbstractDiagramAccessor(node) {
              public List<? extends IDiagramElementAccessor> getElements(IAccessorFactory accessorFactory) {
                final List<IDiagramElementAccessor> elements = new ArrayList<IDiagramElementAccessor>();
                for (SNode e : Sequence.fromIterable(new Object() {
                  public Iterable<SNode> query() {
                    return SNodeOperations.ofConcept(SLinkOperations.getChildren(node, LINKS.content$j5u6), CONCEPTS.EntityDefinition$ws);
                  }
                }.query())) {
                  elements.addAll(accessorFactory.fromSNode(e, false));
                }
                return elements;
              }
              @Override
              public List<IConnectionType> getConnectionTypes() {
                List<IConnectionType> connectionTypes = new ArrayList<IConnectionType>();
                connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                  public String getName() {
                    return "new reference";
                  }
                  @Override
                  public boolean canCreate(final IConnectionEndpoint from, final IConnectionEndpoint to, final List<String> reasons) {
                    final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.EntityDefinition$ws);
                    if (fromNode == null) {
                      return false;
                    }
                    final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.EntityDefinition$ws);
                    if (toNode == null) {
                      return false;
                    }
                    final String fromPort = from.getPortName();
                    final String toPort = to.getPortName();

                    return Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(fromNode, LINKS.members$sAD8), CONCEPTS.EntityMember$ap)).where(new IWhereFilter<SNode>() {
                      public boolean accept(SNode it) {
                        return Objects.equals(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(it, LINKS.type$ljiU), CONCEPTS.EntityType$LN), LINKS.entity$Do0c), toNode);
                      }
                    }).isEmpty();
                  }
                  @Override
                  public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                    final SNode fromNode = SNodeOperations.cast(from.getSNode(), CONCEPTS.EntityDefinition$ws);
                    final SNode toNode = SNodeOperations.cast(to.getSNode(), CONCEPTS.EntityDefinition$ws);
                    final String fromPort = from.getPortName();
                    final String toPort = to.getPortName();

                  }
                  @Override
                  public boolean isValidStart(IConnectionEndpoint from) {
                    final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.EntityDefinition$ws);
                    if (fromNode == null) {
                      return false;
                    }
                    final String fromPort = from.getPortName();
                    return true;
                  }
                  @Override
                  public boolean isValidEnd(IConnectionEndpoint to) {
                    final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.EntityDefinition$ws);
                    if (toNode == null) {
                      return false;
                    }
                    final String toPort = to.getPortName();
                    return true;
                  }
                }));
                return connectionTypes;
              }





            };

            DiagramModel model = DiagramModel.getModel(editorContext, node, "4262820002535596901", accessor);

            ElkLayouter layouter;

            IPaletteEntryProvider paletteEntryProvider = new CompositePaletteEntryProvider(new FilteringPaletteEntryProvider(new SubstituteInfoPaletteEntryProvider(new SubstituteInfoFactory(editorContext, node).forChildLink(node, SLinkOperations.findLinkDeclaration(LINKS.content$j5u6)))) {
              @Override
              protected boolean remove(SAbstractConcept concept, SNode targetNode) {
                return !(SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept), CONCEPTS.EntityDefinition$ws));
              }
            });
            model.setPaletteEntryProvider(paletteEntryProvider);

            if (DiagramCreationContext.isSubdiagram()) {
              editorCell.value = new SubDiagramECell(editorContext, node, model);
            } else {
              editorCell.value = new RootDiagramECell(editorContext, node, model);
              ((RootDiagramECell) editorCell.value).runAutoLayouterOnInit(node, false);
            }
            editorCell.value.setCellId("Diagram_qkudke_c0");
            if (editorCell.value.getContextGraph() != null) {
              Object defaultParent = editorCell.value.getContextGraph().getDefaultParent();
              if (defaultParent instanceof RootDCell) {
                {
                  Style styleDiagram = new StyleImpl();
                  styleDiagram.set(StyleAttributes.getInstance().<Boolean>getAttribute("de.itemis.mps.editor.diagram.styles", "__layout-diagram-button"), false);
                  styleDiagram.set(StyleAttributes.getInstance().<Boolean>getAttribute("de.itemis.mps.editor.diagram.styles", "__relayout-all-edges-button"), false);
                  styleDiagram.set(StyleAttributes.getInstance().<Boolean>getAttribute("de.itemis.mps.editor.diagram.styles", "__maximize-diagram-button"), false);
                  styleDiagram.set(StyleAttributes.getInstance().<Boolean>getAttribute("de.itemis.mps.editor.diagram.styles", "__reset-view-button"), false);
                  styleDiagram.set(StyleAttributes.getInstance().<Boolean>getAttribute("de.itemis.mps.editor.diagram.styles", "__zoom-in-button"), false);
                  styleDiagram.set(StyleAttributes.getInstance().<Boolean>getAttribute("de.itemis.mps.editor.diagram.styles", "__zoom-out-button"), false);
                  styleDiagram.set(StyleAttributes.getInstance().<Boolean>getAttribute("de.itemis.mps.editor.diagram.styles", "__fit-size-all-diagram-button"), false);
                  styleDiagram.set(StyleAttributes.getInstance().<Boolean>getAttribute("de.itemis.mps.editor.diagram.styles", "__show_ports_labels"), false);
                  ((RootDCell) defaultParent).updateButtonConfig(styleDiagram);
                }
              }
            }
          });
        });
      });
    });



    return editorCell.value;
  }
  private EditorCell createDiagram_1() {
    return createDiagram_0(getEditorContext(), myNode);
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink content$j5u6 = MetaAdapterFactory.getContainmentLink(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f658e8aL, 0x7aeac81c0f662b2fL, "content");
    /*package*/ static final SContainmentLink members$sAD8 = MetaAdapterFactory.getContainmentLink(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x27581bc5546348b5L, 0x27581bc554634a89L, "members");
    /*package*/ static final SContainmentLink type$ljiU = MetaAdapterFactory.getContainmentLink(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x27581bc5546b93a2L, 0x27581bc55470a7f7L, "type");
    /*package*/ static final SReferenceLink entity$Do0c = MetaAdapterFactory.getReferenceLink(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x3b289434f886aceaL, 0x3b289434f886ad4cL, "entity");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BStatement$rK = MetaAdapterFactory.getConcept(0x4893d0aba60e42bcL, 0xbfcd58191c291322L, 0x7aeac81c0f662deeL, "mybasica.structure.BStatement");
    /*package*/ static final SConcept EntityDefinition$ws = MetaAdapterFactory.getConcept(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x27581bc5546348b5L, "complex.datatypes.language.structure.EntityDefinition");
    /*package*/ static final SConcept EntityMember$ap = MetaAdapterFactory.getConcept(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x27581bc5546b93a2L, "complex.datatypes.language.structure.EntityMember");
    /*package*/ static final SConcept EntityType$LN = MetaAdapterFactory.getConcept(0x7563d14a4ef54002L, 0xadf6eb0799115e60L, 0x3b289434f886aceaL, "complex.datatypes.language.structure.EntityType");
  }
}
